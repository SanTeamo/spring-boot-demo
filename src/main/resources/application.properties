##设置端口号
server.port=8888

#thymeleaf start
##去除thymeleaf的html严格校验
spring.thymeleaf.mode=LEGACYHTML5
#设定thymeleaf文件路径 默认为src/main/resources/templates
spring.thymeleaf.prefix=classpath:/templates/
#设定静态文件路径，js,css等
#spring.mvc.static-path-pattern=/static/**
# 是否开启模板缓存，默认true
# 关闭 Thymeleaf 的缓存，不然在开发过程中修改页面不会立刻生效需要重启，生产可配置为 true
spring.thymeleaf.cache=false
# 模板编码
spring.thymeleaf.encoding=UTF-8
#thymeleaf end

#国际化 start
##默认为 messages
spring.messages.basename=i18n/login/login
spring.messages.encoding=utf-8
#国际化 end

#datasource start
spring.datasource.url=jdbc:mysql://localhost:3306/test?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

##validate  加载hibernate时，验证创建数据库表结构
##create   每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。
##create-drop        加载hibernate时创建，退出是删除表结构
##update                 加载hibernate自动更新数据库结构
##validate 启动时验证表的结构，不会创建表
##none  启动时不做任何操作
spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
##控制台打印sql
spring.jpa.show-sql=true
##格式化输出SQL语句
spring.jpa.properties.hibernate.format_sql=true
#datasource end

#redis start
# Redis数据库索引（默认为0）
#spring.redis.database=0
# Redis服务器地址，本地虚拟机
#spring.redis.host=192.168.32.129
# Redis服务器连接端口
#spring.redis.port=6379
# Redis服务器连接密码（默认为空）
#spring.redis.password=
#连接池最大连接数（使用负值表示没有限制）
#spring.redis.jedis.pool.max-active=
# 连接池最大阻塞等待时间（使用负值表示没有限制）
#spring.redis.jedis.pool.max-wait=1
# 连接池中的最大空闲连接
#spring.redis.jedis.pool.max-idle=8
# 连接池中的最小空闲连接
#spring.redis.jedis.pool.min-idle=0
# 连接超时时间（毫秒）
#spring.redis.timeout=0
#redis end

#log start
## springBoot缺省的日志实现是logback, 也可以选用其他日志实现, 比如 log4j, log4j2, 或 none, 其中none是彻底关闭日志.
# org.springframework.boot.logging.LoggingSystem=Logback
# logging.config=classpath:logback-spring.xml


# 推荐使用logging.file属性, 而不是 logging.path, 后者仅能指定日志文件的目录, 其文件名永远是spring.log
#logging.file=${java.io.tmpdir}/${spring.application.name}.log
#spring.application.name=demo
#logging.file=./logs/${spring.application.name}.log

# debug=true
#当使用debug模式时, SpringBoot和Hibernate等核心组件会输出更多的信息, debug模式下并不会确保我们应用程序能输出DEBUG级别信息. 要想输出com.springbootmybatis.mybatissample包的debug日志, 需要设置 logging.level.com.springbootmybatis.mybatissample=DEBUG

# trace=true
# 不要打开 trace , 否则会输出太多的trace日志信息, 日志文件可读性非常差, 同时也会影响性能.

#root logger的级别,
logging.level.root=INFO

#其他 class 的级别
logging.level.org.springframework.web=ERROR
logging.level.org.hibernate=ERROR
logging.level.com.springbootmybatis.mybatissample=DEBUG

# 设置高亮error/info日志输出
spring.output.ansi.enabled=ALWAYS
# NEVER: 禁用ANSI-colored输出（默认项)
# DETECT:会检查终端是否支持ANSI，是的话就采用彩色输出(推荐项)
# ALWAYS:总是使用ANSI-colored格式输出，若终端不支持的时候，会有很多干扰信息，不推荐使用
#log end